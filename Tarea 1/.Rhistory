cat("\")
""
)
")
cat("\"")
cat("\')
")
cat("\'")
cat("\")
")
cat("\"")
cat("\')
")
cat("
888888888888                                               88
88                                                  ,d88
88                                                888888
88 ,adPPYYba, 8b,dPPYba,  ,adPPYba, ,adPPYYba,        88
88 \"\"     `Y8 88P'   \"Y8 a8P_____88 \"\"     `Y8        88
88 ,adPPPPP88 88         8PP\"\"\"\"\"\"\" ,adPPPPP88        88
88 88,    ,88 88         \"8b,   ,aa 88,    ,88        88
88 `\"8bbdP\"Y8 88          `\"Ybbd8\"' `\"8bbdP\"Y8        88
")
is.numeric(3)
is.numeric("2")
iter <- 12
if(iter > 10) stop("too many iterations")
readline(prompt = "Ingrese n =")
readline(prompt = "Ingrese n = 3")
readline(prompt = "Ingrese n = ")
as.numeric(readline(prompt = "Ingrese n = "))
as.numeric("a")
A <- as.numeric("a")
is-NA(A)
is.NA(A)
is.na(A)
c("A" <- 3, "B" <- 2)
kek <- c("A" <- 3, "B" <- 2)
names(kek)
name(kek)
names(kek)
names(kek) <- c("a","b")
kek
kek <- c(A <- 3, B <- 2)
kek
names(kek)
kek <- c(A= 3, B = 2)
ek
kek
kek <- c("A"= 3, "B" = 2)
kek
regmatches("2","1245") <- "3"
regmatches(c('2'),"1245") <- "3"
gsub("2","3","123")
gsub("2","3","12245")
as.character(1234)
i <- 1234
indice <- as.character(i) ## se reemplaza el índice
indice <- gsub("0","\u2080",indice)
indice <- gsub("1","\u2081",indice)
indice <- gsub("2","\u2082",indice)
indice <- gsub("3","\u2083",indice)
indice <- gsub("4","\u2084",indice)
indice <- gsub("5","\u2085",indice)
indice <- gsub("6","\u2086",indice)
indice <- gsub("7","\u2087",indice)
indice <- gsub("8","\u2088",indice)
indice <- gsub("9","\u2089",indice)
indice
"F"+indice
paste("F",indice,sep="null")
paste("F",indice,sep="")
c(paste("F",indice,sep="") = 2, "A" =3 )
c(as.string(paste("F",indice,sep="")) = 2, "A" =3 )
c(as.string(paste("F",indice,sep=""))=2, "A"=3)
cat("1. Para 0<n\u2264100, escribe una función  que calcule los n primeros términos
de la sucesión de Fibonacci")
##' @title Fibonacci
##' @description Función que calcula los n primeros términos de la sucesión de fibonacci
##' @param n el número entero no negativo hasta donde calcular los términos de la sucesión de fibonacci
##' @return un vector numérico con los n primeros términos de la sucesión de fibonacci
Fibonacci <- function(n){
if (!is.numeric(as.vector(n)) || length(as.vector(n)) > 1) {
stop("n: debe ser una variable de tipo numérico unidimensional")
} else {
f <- 0
nombres <- "F\u2081" ## almacena los nombres de las variables
if (n > 1) {
f <- c(0, 1)
for (i in 2:n) {
indice <- as.character(i) ## se reemplaza el índice numérico por un subindice unicode textual
indice <- gsub("0","\u2080",indice)
indice <- gsub("1","\u2081",indice)
indice <- gsub("2","\u2082",indice)
indice <- gsub("3","\u2083",indice)
indice <- gsub("4","\u2084",indice)
indice <- gsub("5","\u2085",indice)
indice <- gsub("6","\u2086",indice)
indice <- gsub("7","\u2087",indice)
indice <- gsub("8","\u2088",indice)
indice <- gsub("9","\u2089",indice)
nombres <- c(nombres,paste("F",indice,sep=""))
f <- c(f,f[i-1]+f[i])
}
}
names(f) <- nombres
return(f)
}
}
##' @title flag
##' @description bandera booleana usada para avanzar en diversas partes de este script
flag <- TRUE
##' @title n
##' @description valor para el ejemplo de uso de la función Fibonacci
##' @seealso Fibonacci
n <- as.numeric(readline(prompt = "Ingresa el valor de n: "))
while (flag) {
if (is.na(n) || length(n) > 1 ){
warning("El valor de n debe ser numérico unidimensional")
n <- as.numeric(readline(prompt = "Ingresa el valor de n de nuevo: "))
}
}
